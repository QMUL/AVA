from tqdm import tqdm 
import argparse
from tabulate import tabulate
import os

import numpy as np

# Own libraries
from libs.reader import *
from libs.metrics import *

#sample call: python age.py --dataset_path='./AVA_dataset/' --estimation_path='./Airport-1.csv' --fps=30

def parse_args():
	parser = argparse.ArgumentParser(description='BAVA localization evaluation')
	parser.add_argument('--dataset_path', required=True, type=str, help='Path to the dataset directory')
	parser.add_argument('--estimation_path', required=True, type=str, help='Path to the localization estimation file generated by a BAVA localization algorithm')
	parser.add_argument('--fps', required=False, type=int, help='Frame rate of the videos used as input (e.g. 30)', choices=[30,3,1])
	return parser.parse_args()

if __name__== "__main__":

	args = parse_args() 
	args.bodypart = 'face'
	args.fps = 30

	outdir = 'out/age'
	if not os.path.exists(outdir):
		os.makedirs(outdir)

	video_name = args.estimation_path.split('/')[-1].split('.csv')[0]
	step = int(30/args.fps)
	file = open('out/age/eval_{}.txt'.format(video_name), 'w')

	F0 = []
	F1 = []
	F2 = []
	F3 = []
	times = []

	print('Evaluating age estimation in {} at {}fps...'.format(video_name, args.fps))

	# Read annotation file
	GT = annotationReader('{}/{}.xml'.format(args.dataset_path, video_name), mode=args.bodypart)

	# Read estimation file
	EST = estimationReader(args.estimation_path, bodypart=args.bodypart)

	# Compute metrics
	last_frame = max(GT.last_frame, EST.last_frame)
	classes = range(0,4)
	TP=dict.fromkeys(classes)
	FP=dict.fromkeys(classes)
	FN=dict.fromkeys(classes)
	for ageclass in classes:
		TP[ageclass] = []
		FP[ageclass] = []
		FN[ageclass] = []
	
	for fr in tqdm(range(0,last_frame, step)):
		try:
			cTP, cFP, cFN = age_computeTP_FP_FN(GT, EST, fr, mode=args.bodypart)

			for ageclass in classes:
				TP[ageclass].append(cTP[ageclass])
				FP[ageclass].append(cFP[ageclass])
				FN[ageclass].append(cFN[ageclass])
		except:
			print('Error in frame {}, continuing'.format(fr))
			continue

	for ageclass in classes:
		TP[ageclass] = np.sum(TP[ageclass],axis=0)
		FP[ageclass] = np.sum(FP[ageclass],axis=0)
		FN[ageclass] = np.sum(FN[ageclass],axis=0)

	# Compute P, R, F
	P=dict.fromkeys(classes)
	R=dict.fromkeys(classes)
	F=dict.fromkeys(classes)
	for ageclass in classes:
		P[ageclass] = (TP[ageclass]/(TP[ageclass]+FP[ageclass]))
		R[ageclass] = (TP[ageclass]/(TP[ageclass]+FN[ageclass]))
		F[ageclass] = (2*P[ageclass]*R[ageclass])/(P[ageclass]+R[ageclass])



	# Print out results in a txt file
	times = np.array([EST.data[frame]['time'] for frame in EST.data])
	table = tabulate([ ['{:.2f}'.format(F[0]), '{:.2f}'.format(F[1]), '{:.2f}'.format(F[2]), '{:.2f}'.format(F[3]), '{:.4f} +- {:.4f}'.format(np.mean(times),np.std(times))]], headers=['F-[0,18]','F-[19,35]','F-[36-65]','F-[65+]','Execution time [s]'])
	file.write(table)
	file.close()