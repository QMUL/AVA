from tqdm import tqdm 
import argparse
from tabulate import tabulate
import os

import numpy as np

# Own libraries
from libs.reader import *
from libs.metrics import *

#sample call: python gender.py --dataset_path='./AVA_dataset/' --estimation_path='./Airport-1.csv' --fps=30

def parse_args():
	parser = argparse.ArgumentParser(description='BAVA localization evaluation')
	parser.add_argument('--dataset_path', required=True, type=str, help='Path to the dataset directory')
	parser.add_argument('--estimation_path', required=True, type=str, help='Path to the localization estimation file generated by a BAVA localization algorithm')
	parser.add_argument('--fps', required=False, type=int, help='Frame rate of the videos used as input (e.g. 30)', choices=[30,3,1])
	return parser.parse_args()

if __name__== "__main__":

	args = parse_args() 
	args.bodypart = 'face'
	args.fps = 30

	outdir = 'out/gender'
	if not os.path.exists(outdir):
		os.makedirs(outdir)
	
	video_name = args.estimation_path.split('/')[-1].split('.csv')[0]
	step = int(30/args.fps)
	file = open('out/gender/eval_{}.txt'.format(video_name), 'w')

	Fsmale = []
	Fsfemale = []
	times = []

	print('Evaluating gender estimation in {} at {}fps...'.format(video_name, args.fps))
	
	# Read annotation file
	GT = annotationReader('{}/{}.xml'.format(args.dataset_path, video_name), mode=args.bodypart)

	# Read estimation file
	EST = estimationReader(args.estimation_path, bodypart=args.bodypart)

	# Comput metrics
	last_frame = max(GT.last_frame, EST.last_frame)
	TPmale=[]
	FPmale=[]
	FNmale=[]
	TPfemale=[]
	FPfemale=[]
	FNfemale=[]
	for fr in tqdm(range(0,last_frame, step)):
		try:
			TP_FP_FN = gender_computeTP_FP_FN(GT, EST, fr, mode=args.bodypart)
			TPmale.append(TP_FP_FN[0]['male'])
			FPmale.append(TP_FP_FN[1]['male'])
			FNmale.append(TP_FP_FN[2]['male'])

			TPfemale.append(TP_FP_FN[0]['female'])
			FPfemale.append(TP_FP_FN[1]['female'])
			FNfemale.append(TP_FP_FN[2]['female'])
		except:
			print('Error in frame {}, continuing'.format(fr))
			continue

	TPmale = np.sum(TPmale,axis=0)
	FPmale = np.sum(FPmale,axis=0)
	FNmale = np.sum(FNmale,axis=0)

	TPfemale = np.sum(TPfemale,axis=0)
	FPfemale = np.sum(FPfemale,axis=0)
	FNfemale = np.sum(FNfemale,axis=0)

	#Male
	Pmale=(TPmale/(TPmale+FPmale))
	Rmale=(TPmale/(TPmale+FNmale))
	Fmale=((2*Pmale*Rmale)/(Pmale+Rmale))

	#FeMale
	Pfemale=(TPfemale/(TPfemale+FPfemale))
	Rfemale=(TPfemale/(TPfemale+FNfemale))
	Ffemale=((2*Pfemale*Rfemale)/(Pfemale+Rfemale))

	
	# Print out results in a txt file
	times = np.array([EST.data[frame]['time'] for frame in EST.data])
	table = tabulate([ ['{:.2f}'.format(Fmale), '{:.2f}'.format(Ffemale), '{:.4f} +- {:.4f}'.format(np.mean(times),np.std(times))]], headers=['F-male','F-female','Execution time [s]'])
	file.write(table)
	file.close()