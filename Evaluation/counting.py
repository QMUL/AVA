from tqdm import tqdm 
import argparse
from tabulate import tabulate
import os

import numpy as np

# Own libraries
from libs.reader import *
from libs.metrics import *

#sample call: python counting.py --dataset_path='./AVA_dataset/' --estimation_path='./Airport-1.csv' --fps=30 --bodypart='face'

def parse_args():
	parser = argparse.ArgumentParser(description='BAVA localization evaluation')
	parser.add_argument('--dataset_path', required=True, type=str, help='Path to the dataset directory')
	parser.add_argument('--estimation_path', required=True, type=str, help='Path to the localization estimation file generated by a BAVA localization algorithm')
	parser.add_argument('--fps', required=False, type=int, help='Frame rate of the videos used as input (e.g. 30)', choices=[30,3,1])
	parser.add_argument('--bodypart', required=False, type=str, help='Body part to evaluate (e.g. face)', choices=['person','face'])
	return parser.parse_args()


if __name__== "__main__":

	args = parse_args()
	args.bodypart = 'person'
	args.fps = 30
	
	outdir = 'out/count'
	if not os.path.exists(outdir):
		os.makedirs(outdir)
	
	video_name = args.estimation_path.split('/')[-1].split('.csv')[0]
	step = int(30/args.fps)
	file = open('out/count/eval_{}.txt'.format(video_name), 'w')

	MOEs = []
	COEs = []
	MREs = []
	distances_close = []
	distances_far = []
	times = []

	print('Evaluating count in {} at {}fps on {}...'.format(video_name, args.fps, args.bodypart))
	
	# Read annotation file
	GT = annotationReader('{}/{}.xml'.format(args.dataset_path, video_name), mode=args.bodypart)

	# Read estimation file
	EST = estimationReader(args.estimation_path, bodypart=args.bodypart)

	# Comput metrics
	last_frame = max(GT.last_frame, EST.last_frame)
	MOE=dict.fromkeys(['global','distance'])
	for key in MOE:
			MOE[key] = []
	MRE=[]
	for fr in tqdm(range(0, last_frame, step)):
		try:
			MOE['global'].append(computeMOE(GT, EST,fr))
			MRE.append(computeMRE(GT, EST, fr))
			MOE['distance'].append(computeMOE_distance(GT, EST, fr, mode=args.bodypart))
		except:
			print('Error in frame {}, continuing'.format(fr))
			continue

	CCRE = computeCOE(GT,EST)
	MOE_distance = np.mean(np.array(MOE['distance']),axis=0)

	# Print out results in a txt file
	times = np.array([EST.data[frame]['time'] for frame in EST.data])
	table = tabulate([ ['{:.2f}'.format(np.mean(np.array(MOE['global']))), '{:.2f}'.format(MOE_distance[0]), '{:.2f}'.format(MOE_distance[1]), '{:.2f}'.format(CCRE), '{:.2f}'.format(np.mean(np.array(MRE))), '{:.4f} +- {:.4f}'.format(np.mean(times),np.std(times))]], headers=['MOE','MOE-close','MOE-far','COE','MPE','Execution time [s]'])
	file.write(table)
	file.close()